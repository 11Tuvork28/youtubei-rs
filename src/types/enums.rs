use serde::Deserialize;
use serde_json::Value;
use super::{video::{VideoRenderer, VideoPrimaryInfoRenderer, VideoSecondaryInfoRenderer, CompactVideoRenderer, GridVideoRenderer, CommentThreadRenderer, ReelItemRenderer, CommentRenderer, MetadataRowRenderer}, playlist::{GridPlaylistRenderer, PlaylistRenderer, CompactRadioRenderer, RadioRenderer}, channel::{BackstagePostThreadRenderer, ChannelRenderer, ChannelVideoPlayerRenderer, GridChannelRenderer, ChannelAboutFullMetadataRenderer, RichGridRenderer, C4TabbedHeaderRenderer, RichItemRenderer}, misc::{HashtagHeaderRenderer, MessageRenderer, ShelfRenderer, ReelShelfRenderer, ContinuationItemRenderer, ItemSectionRenderer, SectionListRenderer, GridRenderer, ButtonRenderer, ToggleButtonRenderer, TwoColumnBrowseResultsRenderer, TwoColumnWatchNextResults, TwoColumnSearchResultsRenderer, SingleColumnBrowseResultsRenderer, IncludingResultsForRenderer, ShowingResultsForRenderer}};

#[derive(Debug, Clone, Deserialize)]
#[serde(rename_all = "camelCase")]
pub enum ItemSectionRendererContents{
    ContinuationItemRenderer(ContinuationItemRenderer),
    GridRenderer(GridRenderer),
    GridVideoRenderer(GridVideoRenderer),
    BackstagePostThreadRenderer(BackstagePostThreadRenderer),
    ItemSectionRenderer(ItemSectionRenderer),
    PlaylistRenderer(PlaylistRenderer),
    VideoRenderer(VideoRenderer),
    ChannelRenderer(ChannelRenderer),
    GridChannelRenderer(GridChannelRenderer),
    GridPlaylistRenderer(GridPlaylistRenderer),
    ShelfRenderer(ShelfRenderer),
    ChannelVideoPlayerRenderer(ChannelVideoPlayerRenderer),
    ReelShelfRenderer(ReelShelfRenderer), // Shorts are stored in here
    //SearchPyvRenderer(Value), // TODO FIND OUT WHAT IT IS
    CommentsEntryPointHeaderRenderer(Value),
    RadioRenderer(RadioRenderer), // Wrapper for CompactRadioRenderer
    ChannelAboutFullMetadataRenderer(ChannelAboutFullMetadataRenderer),
    RecognitionShelfRenderer(Value), // Channel members but needs more investigation
    MessageRenderer(MessageRenderer), // Contains messages that e.g the channel has no videos
    ShowingResultsForRenderer(ShowingResultsForRenderer),// When youtube returns other results
    IncludingResultsForRenderer(IncludingResultsForRenderer), // When youtube returns other results
}
#[derive(Debug, Clone, Deserialize)]
#[serde(rename_all = "camelCase")]
pub enum HeaderContents{
    C4TabbedHeaderRenderer(C4TabbedHeaderRenderer),
    HashtagHeaderRenderer(HashtagHeaderRenderer),
}
#[derive(Debug, Clone, Deserialize)]
#[serde(rename_all = "camelCase")]
pub enum NextContents{
    CompactPromotedVideoRenderer(Value), // Contains only ads which we dont need lol
    CompactRadioRenderer(CompactRadioRenderer), // Holds mixes? Aka autogenerated playlists
    CompactVideoRenderer(CompactVideoRenderer),
    CommentsEntryPointHeaderRenderer(Value),
    CommentRenderer(CommentRenderer),
    CommentThreadRenderer(CommentThreadRenderer),
    CommentsHeaderRenderer(Value),
    VideoPrimaryInfoRenderer(VideoPrimaryInfoRenderer),
    VideoSecondaryInfoRenderer(VideoSecondaryInfoRenderer),
    ContinuationItemRenderer(ContinuationItemRenderer),
    ItemSectionRenderer(ItemSectionRenderer),
    PromotedSparklesWebRenderer(Value),
    MerchandiseShelfRenderer(Value), // Basically ads but we dont want those so we don't parse it further
}
#[derive(Debug, Clone, Deserialize)]
#[serde(rename_all = "camelCase")]
pub enum TabRendererContent{
    RichGridRenderer(RichGridRenderer), // Hashtags are stored in there
    SectionListRenderer(SectionListRenderer),
}

#[derive(Debug, Clone, Deserialize)]
#[serde(rename_all = "camelCase")]
pub enum RichGridRendererContent{
    RichItemRenderer(RichItemRenderer),
    ContinuationItemRenderer(ContinuationItemRenderer), 
}

#[derive(Debug, Clone, Deserialize)]
#[serde(rename_all = "camelCase")]
pub enum TopLevelButtons{
    ButtonRenderer(ButtonRenderer),
    ToggleButtonRenderer(ToggleButtonRenderer)
}
#[derive(Debug, Clone, Deserialize)]
#[serde(rename_all = "camelCase")]
pub enum MetadataRowContents{
    MetadataRowRenderer(MetadataRowRenderer),
    MetadataRowHeaderRenderer(Value)
}

#[derive(Debug, Clone, Deserialize)]
#[serde(rename_all = "camelCase")]
pub enum TwoColumnTypes{
    TwoColumnBrowseResultsRenderer(TwoColumnBrowseResultsRenderer),
    TwoColumnWatchNextResults(TwoColumnWatchNextResults),
    TwoColumnSearchResultsRenderer(TwoColumnSearchResultsRenderer),
    SingleColumnBrowseResultsRenderer(SingleColumnBrowseResultsRenderer)
}
